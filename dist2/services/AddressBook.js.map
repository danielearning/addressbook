{"version":3,"sources":["services/node_modules/browser-pack/_prelude.js","dist/services/AddressBook.js"],"names":[],"mappings":"AAAA;ACAA,YAUA,IAAI,SAAU,QAAQ,OAAO,uBAAwB,oBAErD,SAAQ,QAAQ,eAAgB,UAChC,iBACA,mBACA,SACA,SAAU,EAAS,EAAiB,EAAmB,GAKrD,QAAS,KACF,EAAQ,cAAiB,EAAQ,aAAa,qBAC5C,EAAQ,eACX,EAAQ,iBAEV,OAOJ,QAAS,KAEP,GAAI,GAAU,GAAW,EAAQ,YAAc,EAAQ,QAAU,SAAU,GACzE,MAAO,GAET,OAAO,MAAK,MAAM,EAAQ,EAAQ,aAAa,qBAMjD,QAAS,GAAgB,GACvB,GAAI,GAAU,GAAW,EAAQ,YAAc,EAAQ,QAAU,SAAU,GACzE,MAAO,GAET,GAAQ,aAAa,mBAAqB,EAAQ,KAAK,UAAU,IAMnE,QAAS,GAAc,GACrB,MAAK,IAAU,EAAM,WAAc,EAAM,UAAa,EAAM,aAAgB,EAAM,MAI9E,IAAoB,EAAgB,SAAS,EAAM,QAE5C,IAAK,iCAEZ,IAAsB,EAAkB,SAAS,EAAM,cAEhD,IAAK,0CAET,GAVI,IAAK,iCAiBlB,QAAS,GAAO,EAAO,GACrB,GAAI,GAAK,KAAK,KACd,IAAI,EAAK,GAAK,CAEZ,IADA,GAAI,GAAI,EACD,EAAK,EAAK,IACf,GAEF,IAAM,EAER,MAAO,GA0BT,QAAS,GAAQ,EAAQ,GAEvB,GAAI,GAA2B,gBAAd,GAAO,GAAkB,EAAO,GAAK,EAAO,GAAG,EAChE,IACA,IAAI,GAAO,IACP,EAAc,EAAK,EAMvB,cALO,GAAK,GACZ,EAAgB,GACZ,GACF,EAAS,GAEJ,EAGT,OACE,IAAK,SAAa,EAAQ,GAExB,GACA,IAAI,GAAI,IAAkB,EAAO,GAOjC,OANI,KACF,EAAE,GAAK,EAAO,IAEZ,GACF,EAAS,GAEJ,GAGT,SAAU,SAAkB,GAE1B,MAAO,GAAc,IAGvB,KAAM,QAAS,GAAK,EAAO,GAIzB,GAFA,IAE4B,GAAxB,EAAc,GAIhB,MAHI,IACF,GAAS,IAEJ,CAIT,IAAI,GAAO,IACP,EAAyB,mBAAb,GAAM,GAAqB,EAAM,GAAK,EAAO,EAAO,GAGhE,GACF,UAAW,GAAK,EAAM,UACtB,SAAU,GAAK,EAAM,SACrB,MAAO,GAAK,EAAM,MAClB,YAAa,GAAK,EAAM,YAU1B,OANA,GAAK,GAAM,EACX,EAAgB,GAChB,EAAK,GAAK,EACN,GACF,EAAS,GAEJ,GAGT,MAAO,SAAe,GAEpB,GACA,IAAI,MACA,EAAO,GACX,KAAK,GAAI,KAAK,GAAM,CAClB,GAAI,GAAK,EAAK,EACd,GAAG,GAAK,EACR,EAAE,KAAK,GAKT,MAHI,IACF,EAAS,GAEJ,GAGT,OAAQ,EACR,SAAQ,EAKR,QAAS,WACP","file":"services/AddressBook.js","sourceRoot":".","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\n/** AddressBook storage service.\n * \n * Mimics $resource interface.\n * FIXME Should return promises instead of being synchronous.\n * @see https://docs.angularjs.org/api/ngResource/service/$resource\n * \n * */\n\nvar service = angular.module('addressBookServices', ['addressBookUtils']);\n\nservice.factory('AddressBook', ['$window', // Since localStorage belongs to window.\n'EmailValidator', // May use an external REST service.\n'CountryValidator', // May check against a list of country codes. That list shouldn't be here.\n'Cypher', // Store encrypted data. Cool!\nfunction ($window, $emailvalidator, $countryvalidator, $cypher) {\n\n  /** Makes sure there is something at window.localStorage, so that the app may work.\n   * UI should warn about not having window.localStorage\n   * */\n  function enforcePhoneBook() {\n    if (!$window.localStorage || !$window.localStorage.addressBookEntries) {\n      if (!$window.localStorage) {\n        $window.localStorage = {};\n      }\n      saveAddressBook({});\n    }\n  };\n\n  /** Loads AddressBook from localStorage\n   * FIXME This full save/load will scale poorly with multi-MB agendas.\n   * */\n  function loadAddressBook() {\n    //console.log('load book');\n    var decrypt = $cypher && $cypher.available() ? $cypher.decrypt : function (x) {\n      return x;\n    };\n    return JSON.parse(decrypt($window.localStorage.addressBookEntries));\n  };\n\n  /** Saves AddressBook to localStorage\n   * FIXME This full save/load will scale poorly with multi-MB agendas.\n   * */\n  function saveAddressBook(book) {\n    var encrypt = $cypher && $cypher.available() ? $cypher.encrypt : function (x) {\n      return x;\n    };\n    $window.localStorage.addressBookEntries = encrypt(JSON.stringify(book));\n  };\n\n  /** Runs entry validations.\n   * \n   * */\n  function validateEntry(entry) {\n    if (!entry || !entry.firstname || !entry.lastname || !entry.countrycode || !entry.email) {\n      //console.log('validateEntry', 'empty data');\n      return { err: 'Required field is not present' };\n    }\n    if ($emailvalidator && !$emailvalidator.validate(entry.email)) {\n      //console.log('validateEntry', 'bad email');\n      return { err: 'Required email has bad format' };\n    }\n    if ($countryvalidator && !$countryvalidator.validate(entry.countrycode)) {\n      //console.log('validateEntry', 'bad country');\n      return { err: 'Required country cannot be recognized' };;\n    }\n    return true;\n  };\n\n  /** Generates an unique id for the data.\n   * If we used a database back-end, it would make the ids for us.\n   * \n   * */\n  function makeId(entry, book) {\n    var id = Date.now();\n    if (book[id]) {\n      var n = 1;\n      while (book[id + n]) {\n        n++;\n      }\n      id += n;\n    }\n    return id;\n    /* Alternate id maker:\n     * @returns email+john-doe-1@example.com\n     * It's so wasteful, but it's cool that one can directly email to it.\n    var baseslug = entry.email.replace('@', \n      '+' + \n      (entry.firstname.toLowerCase() + '-' + entry.lastname.toLowerCase())\n      .replace(/[^\\w]/, '-') + \n      '@');\n    if (book[baseslug]) {\n      baseslug = baseslug + '-';\n      var n = 1;\n      while (book[baseslug + n]) {\n        n++;\n      }\n      return baseslug + n;\n    }\n    return baseslug;\n    */\n  };\n\n  /** Delete\n   * Declared apart, since it is used several times.\n   * @param params.id Either id is the id, or id is an entry extended with its own id.\n   * @returns Deleted instance\n   * */\n  function _remove(params, callback) {\n    // The delete\n    var _id = typeof params.id === 'string' ? params.id : params.id.id;\n    enforcePhoneBook();\n    var book = loadAddressBook();\n    var toBeDeleted = book[_id];\n    delete book[_id];\n    saveAddressBook(book);\n    if (callback) {\n      callback(toBeDeleted);\n    }\n    return toBeDeleted;\n  };\n\n  return {\n    get: function get(params, callback) {\n      // Basic entry get.\n      enforcePhoneBook();\n      var e = loadAddressBook()[params.id];\n      if (e) {\n        e.id = params.id;\n      }\n      if (callback) {\n        callback(e);\n      }\n      return e;\n    },\n\n    validate: function validate(entry) {\n      // Validate only, like in Sequelize\n      return validateEntry(entry);\n    },\n\n    save: function save(entry, callback) {\n      // Validate and save entry\n      enforcePhoneBook();\n\n      if (validateEntry(entry) != true) {\n        if (callback) {\n          callback(false);\n        }\n        return false;\n      }\n\n      // Modify if id is present; create new if otherwise.\n      var book = loadAddressBook();\n      var id = typeof entry.id !== 'undefined' ? entry.id : makeId(entry, book);\n\n      // Save only the strictly necessary\n      var save = {\n        firstname: '' + entry.firstname,\n        lastname: '' + entry.lastname,\n        email: '' + entry.email,\n        countrycode: '' + entry.countrycode\n      };\n\n      // Save sanitized entry and return it\n      book[id] = save;\n      saveAddressBook(book);\n      save.id = id;\n      if (callback) {\n        callback(save);\n      }\n      return save;\n    },\n\n    query: function query(callback) {\n      // A get all\n      enforcePhoneBook();\n      var r = [];\n      var book = loadAddressBook();\n      for (var i in book) {\n        var rr = book[i];\n        rr.id = i;\n        r.push(rr);\n      }\n      if (callback) {\n        callback(r);\n      }\n      return r;\n    },\n\n    remove: _remove, // DELETE\n    delete: _remove, // DELETE\n\n    /** Empty.\n     * Deletes entries\n     * */\n    clearDb: function clearDb() {\n      saveAddressBook({});\n    }\n  };\n}]);"]}