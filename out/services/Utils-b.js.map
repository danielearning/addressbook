{"version":3,"sources":["services/node_modules/browser-pack/_prelude.js","dist/services/Utils-b.js"],"names":[],"mappings":"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","file":"services/Utils-b.js","sourceRoot":".","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\n\n(function e(t, n, r) {\n  function s(o, u) {\n    if (!n[o]) {\n      if (!t[o]) {\n        var a = typeof require == \"function\" && require;if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error(\"Cannot find module '\" + o + \"'\");throw f.code = \"MODULE_NOT_FOUND\", f;\n      }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {\n        var n = t[o][1][e];return s(n ? n : e);\n      }, l, l.exports, e, t, n, r);\n    }return n[o].exports;\n  }var i = typeof require == \"function\" && require;for (var o = 0; o < r.length; o++) {\n    s(r[o]);\n  }return s;\n})({ 1: [function (require, module, exports) {\n    'use strict';\n\n    // Dependencies\n\n    var countries = require('country-list')();\n\n    // Utils.\n    var service = angular.module('addressBookUtils', []);\n\n    /** Email validation service\n     * FIXME Email validation is a pain\n     * @see http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n     * @see http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address\n     * @see https://code.exacttarget.com/apis-sdks/rest-api/v1/address/validateEmail.html\n     * \n     * */\n    service.factory('EmailValidator', [function () {\n      return {\n        /** Loosest validation.\n         * Accept saving anything with an @, avoid false negatives.\n         * */\n        validate: function validate(email) {\n          return typeof email === 'string' && email.indexOf('@') > 0 && email.indexOf('\\n') < 0;\n        }\n      };\n    }]);\n\n    /** Country validation service\n     * Checks the country code against a list.\n     * @see \n     * */\n    service.factory('CountryValidator', [function () {\n\n      return {\n        /** Check is a valid, known country code.\n         * @see https://www.npmjs.com/package/country-list\n         * @see http://data.okfn.org/data/country-list\n         * */\n        validate: function validate(countrycode) {\n          return countries.getName(countrycode) ? true : false;\n        }\n      };\n    }]);\n\n    /** Performs basic cyphering of data. This is more for demo purposes than anything\n     * FIXME ROT13 is the first encoding method a kindergarten boy would think. And this is not even ROT\n     * TODO Add at least GZIP compression to remove redundancy.\n     * TODO Use a password, generate a long chain of random numbers and rotate against each.\n     * */\n    service.factory('Cypher', [function () {\n      return {\n        /** If encryption/decryption is available.\n         * Could check against having a password present. For such a simple method, it is always true.\n         * */\n        available: function available() {\n          return true;\n        },\n        encrypt: function encrypt(text) {\n          if (typeof text !== 'string') {\n            return text;\n          }\n          return text.replace(/./g, function (x) {\n            return String.fromCharCode(x.charCodeAt(0) + 13);\n          });\n        },\n        decrypt: function decrypt(text) {\n          if (typeof text !== 'string') {\n            return text;\n          }\n          return text.replace(/./g, function (x) {\n            return String.fromCharCode(x.charCodeAt(0) - 13);\n          });\n        }\n      };\n    }]);\n\n    /** Converts country code to country name\n     * \n     * */\n    service.filter('countryName', function () {\n      return function (code) {\n        return code && countries.getName(code);\n      };\n    });\n\n    /** Returns an URL to a flag\n     * FIXME Hotlinks to flags on the Internet. Get my own flags.\n     * */\n    service.filter('countryFlag', function () {\n      return function (code) {\n        return code && 'img/flags_iso/24/' + code.toLowerCase() + '.png';\n      };\n    });\n  }, { \"country-list\": 2 }], 2: [function (require, module, exports) {\n    'use strict';\n\n    var data = require('./data.json');\n\n    /**\n     * Precompute name and code lookups.\n     */\n    var nameMap = {};\n    var codeMap = {};\n    data.forEach(function (country) {\n      nameMap[country.name.toLowerCase()] = country.code;\n      codeMap[country.code.toLowerCase()] = country.name;\n    });\n\n    module.exports = CountryList;\n    function CountryList() {\n      if (!(this instanceof CountryList)) return new CountryList();\n    };\n\n    CountryList.prototype.getCode = function getCode(name) {\n      return nameMap[name.toLowerCase()];\n    };\n\n    CountryList.prototype.getName = function getName(code) {\n      return codeMap[code.toLowerCase()];\n    };\n\n    CountryList.prototype.getNames = function getNames() {\n      return data.map(function (country) {\n        return country.name;\n      });\n    };\n\n    CountryList.prototype.getCodes = function getCodes() {\n      return data.map(function (country) {\n        return country.code;\n      });\n    };\n\n    CountryList.prototype.getData = function getData() {\n      return data;\n    };\n  }, { \"./data.json\": 3 }], 3: [function (require, module, exports) {\n    module.exports = [{ \"code\": \"AF\", \"name\": \"Afghanistan\" }, { \"code\": \"AX\", \"name\": \"Åland Islands\" }, { \"code\": \"AL\", \"name\": \"Albania\" }, { \"code\": \"DZ\", \"name\": \"Algeria\" }, { \"code\": \"AS\", \"name\": \"American Samoa\" }, { \"code\": \"AD\", \"name\": \"Andorra\" }, { \"code\": \"AO\", \"name\": \"Angola\" }, { \"code\": \"AI\", \"name\": \"Anguilla\" }, { \"code\": \"AQ\", \"name\": \"Antarctica\" }, { \"code\": \"AG\", \"name\": \"Antigua and Barbuda\" }, { \"code\": \"AR\", \"name\": \"Argentina\" }, { \"code\": \"AM\", \"name\": \"Armenia\" }, { \"code\": \"AW\", \"name\": \"Aruba\" }, { \"code\": \"AU\", \"name\": \"Australia\" }, { \"code\": \"AT\", \"name\": \"Austria\" }, { \"code\": \"AZ\", \"name\": \"Azerbaijan\" }, { \"code\": \"BS\", \"name\": \"Bahamas\" }, { \"code\": \"BH\", \"name\": \"Bahrain\" }, { \"code\": \"BD\", \"name\": \"Bangladesh\" }, { \"code\": \"BB\", \"name\": \"Barbados\" }, { \"code\": \"BY\", \"name\": \"Belarus\" }, { \"code\": \"BE\", \"name\": \"Belgium\" }, { \"code\": \"BZ\", \"name\": \"Belize\" }, { \"code\": \"BJ\", \"name\": \"Benin\" }, { \"code\": \"BM\", \"name\": \"Bermuda\" }, { \"code\": \"BT\", \"name\": \"Bhutan\" }, { \"code\": \"BO\", \"name\": \"Bolivia, Plurinational State of\" }, { \"code\": \"BQ\", \"name\": \"Bonaire, Sint Eustatius and Saba\" }, { \"code\": \"BA\", \"name\": \"Bosnia and Herzegovina\" }, { \"code\": \"BW\", \"name\": \"Botswana\" }, { \"code\": \"BV\", \"name\": \"Bouvet Island\" }, { \"code\": \"BR\", \"name\": \"Brazil\" }, { \"code\": \"IO\", \"name\": \"British Indian Ocean Territory\" }, { \"code\": \"BN\", \"name\": \"Brunei Darussalam\" }, { \"code\": \"BG\", \"name\": \"Bulgaria\" }, { \"code\": \"BF\", \"name\": \"Burkina Faso\" }, { \"code\": \"BI\", \"name\": \"Burundi\" }, { \"code\": \"KH\", \"name\": \"Cambodia\" }, { \"code\": \"CM\", \"name\": \"Cameroon\" }, { \"code\": \"CA\", \"name\": \"Canada\" }, { \"code\": \"CV\", \"name\": \"Cape Verde\" }, { \"code\": \"KY\", \"name\": \"Cayman Islands\" }, { \"code\": \"CF\", \"name\": \"Central African Republic\" }, { \"code\": \"TD\", \"name\": \"Chad\" }, { \"code\": \"CL\", \"name\": \"Chile\" }, { \"code\": \"CN\", \"name\": \"China\" }, { \"code\": \"CX\", \"name\": \"Christmas Island\" }, { \"code\": \"CC\", \"name\": \"Cocos (Keeling) Islands\" }, { \"code\": \"CO\", \"name\": \"Colombia\" }, { \"code\": \"KM\", \"name\": \"Comoros\" }, { \"code\": \"CG\", \"name\": \"Congo\" }, { \"code\": \"CD\", \"name\": \"Congo, the Democratic Republic of the\" }, { \"code\": \"CK\", \"name\": \"Cook Islands\" }, { \"code\": \"CR\", \"name\": \"Costa Rica\" }, { \"code\": \"CI\", \"name\": \"Côte d'Ivoire\" }, { \"code\": \"HR\", \"name\": \"Croatia\" }, { \"code\": \"CU\", \"name\": \"Cuba\" }, { \"code\": \"CW\", \"name\": \"Curaçao\" }, { \"code\": \"CY\", \"name\": \"Cyprus\" }, { \"code\": \"CZ\", \"name\": \"Czech Republic\" }, { \"code\": \"DK\", \"name\": \"Denmark\" }, { \"code\": \"DJ\", \"name\": \"Djibouti\" }, { \"code\": \"DM\", \"name\": \"Dominica\" }, { \"code\": \"DO\", \"name\": \"Dominican Republic\" }, { \"code\": \"EC\", \"name\": \"Ecuador\" }, { \"code\": \"EG\", \"name\": \"Egypt\" }, { \"code\": \"SV\", \"name\": \"El Salvador\" }, { \"code\": \"GQ\", \"name\": \"Equatorial Guinea\" }, { \"code\": \"ER\", \"name\": \"Eritrea\" }, { \"code\": \"EE\", \"name\": \"Estonia\" }, { \"code\": \"ET\", \"name\": \"Ethiopia\" }, { \"code\": \"FK\", \"name\": \"Falkland Islands (Malvinas)\" }, { \"code\": \"FO\", \"name\": \"Faroe Islands\" }, { \"code\": \"FJ\", \"name\": \"Fiji\" }, { \"code\": \"FI\", \"name\": \"Finland\" }, { \"code\": \"FR\", \"name\": \"France\" }, { \"code\": \"GF\", \"name\": \"French Guiana\" }, { \"code\": \"PF\", \"name\": \"French Polynesia\" }, { \"code\": \"TF\", \"name\": \"French Southern Territories\" }, { \"code\": \"GA\", \"name\": \"Gabon\" }, { \"code\": \"GM\", \"name\": \"Gambia\" }, { \"code\": \"GE\", \"name\": \"Georgia\" }, { \"code\": \"DE\", \"name\": \"Germany\" }, { \"code\": \"GH\", \"name\": \"Ghana\" }, { \"code\": \"GI\", \"name\": \"Gibraltar\" }, { \"code\": \"GR\", \"name\": \"Greece\" }, { \"code\": \"GL\", \"name\": \"Greenland\" }, { \"code\": \"GD\", \"name\": \"Grenada\" }, { \"code\": \"GP\", \"name\": \"Guadeloupe\" }, { \"code\": \"GU\", \"name\": \"Guam\" }, { \"code\": \"GT\", \"name\": \"Guatemala\" }, { \"code\": \"GG\", \"name\": \"Guernsey\" }, { \"code\": \"GN\", \"name\": \"Guinea\" }, { \"code\": \"GW\", \"name\": \"Guinea-Bissau\" }, { \"code\": \"GY\", \"name\": \"Guyana\" }, { \"code\": \"HT\", \"name\": \"Haiti\" }, { \"code\": \"HM\", \"name\": \"Heard Island and McDonald Mcdonald Islands\" }, { \"code\": \"VA\", \"name\": \"Holy See (Vatican City State)\" }, { \"code\": \"HN\", \"name\": \"Honduras\" }, { \"code\": \"HK\", \"name\": \"Hong Kong\" }, { \"code\": \"HU\", \"name\": \"Hungary\" }, { \"code\": \"IS\", \"name\": \"Iceland\" }, { \"code\": \"IN\", \"name\": \"India\" }, { \"code\": \"ID\", \"name\": \"Indonesia\" }, { \"code\": \"IR\", \"name\": \"Iran, Islamic Republic of\" }, { \"code\": \"IQ\", \"name\": \"Iraq\" }, { \"code\": \"IE\", \"name\": \"Ireland\" }, { \"code\": \"IM\", \"name\": \"Isle of Man\" }, { \"code\": \"IL\", \"name\": \"Israel\" }, { \"code\": \"IT\", \"name\": \"Italy\" }, { \"code\": \"JM\", \"name\": \"Jamaica\" }, { \"code\": \"JP\", \"name\": \"Japan\" }, { \"code\": \"JE\", \"name\": \"Jersey\" }, { \"code\": \"JO\", \"name\": \"Jordan\" }, { \"code\": \"KZ\", \"name\": \"Kazakhstan\" }, { \"code\": \"KE\", \"name\": \"Kenya\" }, { \"code\": \"KI\", \"name\": \"Kiribati\" }, { \"code\": \"KP\", \"name\": \"Korea, Democratic People's Republic of\" }, { \"code\": \"KR\", \"name\": \"Korea, Republic of\" }, { \"code\": \"KW\", \"name\": \"Kuwait\" }, { \"code\": \"KG\", \"name\": \"Kyrgyzstan\" }, { \"code\": \"LA\", \"name\": \"Lao People's Democratic Republic\" }, { \"code\": \"LV\", \"name\": \"Latvia\" }, { \"code\": \"LB\", \"name\": \"Lebanon\" }, { \"code\": \"LS\", \"name\": \"Lesotho\" }, { \"code\": \"LR\", \"name\": \"Liberia\" }, { \"code\": \"LY\", \"name\": \"Libya\" }, { \"code\": \"LI\", \"name\": \"Liechtenstein\" }, { \"code\": \"LT\", \"name\": \"Lithuania\" }, { \"code\": \"LU\", \"name\": \"Luxembourg\" }, { \"code\": \"MO\", \"name\": \"Macao\" }, { \"code\": \"MK\", \"name\": \"Macedonia, the Former Yugoslav Republic of\" }, { \"code\": \"MG\", \"name\": \"Madagascar\" }, { \"code\": \"MW\", \"name\": \"Malawi\" }, { \"code\": \"MY\", \"name\": \"Malaysia\" }, { \"code\": \"MV\", \"name\": \"Maldives\" }, { \"code\": \"ML\", \"name\": \"Mali\" }, { \"code\": \"MT\", \"name\": \"Malta\" }, { \"code\": \"MH\", \"name\": \"Marshall Islands\" }, { \"code\": \"MQ\", \"name\": \"Martinique\" }, { \"code\": \"MR\", \"name\": \"Mauritania\" }, { \"code\": \"MU\", \"name\": \"Mauritius\" }, { \"code\": \"YT\", \"name\": \"Mayotte\" }, { \"code\": \"MX\", \"name\": \"Mexico\" }, { \"code\": \"FM\", \"name\": \"Micronesia, Federated States of\" }, { \"code\": \"MD\", \"name\": \"Moldova, Republic of\" }, { \"code\": \"MC\", \"name\": \"Monaco\" }, { \"code\": \"MN\", \"name\": \"Mongolia\" }, { \"code\": \"ME\", \"name\": \"Montenegro\" }, { \"code\": \"MS\", \"name\": \"Montserrat\" }, { \"code\": \"MA\", \"name\": \"Morocco\" }, { \"code\": \"MZ\", \"name\": \"Mozambique\" }, { \"code\": \"MM\", \"name\": \"Myanmar\" }, { \"code\": \"NA\", \"name\": \"Namibia\" }, { \"code\": \"NR\", \"name\": \"Nauru\" }, { \"code\": \"NP\", \"name\": \"Nepal\" }, { \"code\": \"NL\", \"name\": \"Netherlands\" }, { \"code\": \"NC\", \"name\": \"New Caledonia\" }, { \"code\": \"NZ\", \"name\": \"New Zealand\" }, { \"code\": \"NI\", \"name\": \"Nicaragua\" }, { \"code\": \"NE\", \"name\": \"Niger\" }, { \"code\": \"NG\", \"name\": \"Nigeria\" }, { \"code\": \"NU\", \"name\": \"Niue\" }, { \"code\": \"NF\", \"name\": \"Norfolk Island\" }, { \"code\": \"MP\", \"name\": \"Northern Mariana Islands\" }, { \"code\": \"NO\", \"name\": \"Norway\" }, { \"code\": \"OM\", \"name\": \"Oman\" }, { \"code\": \"PK\", \"name\": \"Pakistan\" }, { \"code\": \"PW\", \"name\": \"Palau\" }, { \"code\": \"PS\", \"name\": \"Palestine, State of\" }, { \"code\": \"PA\", \"name\": \"Panama\" }, { \"code\": \"PG\", \"name\": \"Papua New Guinea\" }, { \"code\": \"PY\", \"name\": \"Paraguay\" }, { \"code\": \"PE\", \"name\": \"Peru\" }, { \"code\": \"PH\", \"name\": \"Philippines\" }, { \"code\": \"PN\", \"name\": \"Pitcairn\" }, { \"code\": \"PL\", \"name\": \"Poland\" }, { \"code\": \"PT\", \"name\": \"Portugal\" }, { \"code\": \"PR\", \"name\": \"Puerto Rico\" }, { \"code\": \"QA\", \"name\": \"Qatar\" }, { \"code\": \"RE\", \"name\": \"Réunion\" }, { \"code\": \"RO\", \"name\": \"Romania\" }, { \"code\": \"RU\", \"name\": \"Russian Federation\" }, { \"code\": \"RW\", \"name\": \"Rwanda\" }, { \"code\": \"BL\", \"name\": \"Saint Barthélemy\" }, { \"code\": \"SH\", \"name\": \"Saint Helena, Ascension and Tristan da Cunha\" }, { \"code\": \"KN\", \"name\": \"Saint Kitts and Nevis\" }, { \"code\": \"LC\", \"name\": \"Saint Lucia\" }, { \"code\": \"MF\", \"name\": \"Saint Martin (French part)\" }, { \"code\": \"PM\", \"name\": \"Saint Pierre and Miquelon\" }, { \"code\": \"VC\", \"name\": \"Saint Vincent and the Grenadines\" }, { \"code\": \"WS\", \"name\": \"Samoa\" }, { \"code\": \"SM\", \"name\": \"San Marino\" }, { \"code\": \"ST\", \"name\": \"Sao Tome and Principe\" }, { \"code\": \"SA\", \"name\": \"Saudi Arabia\" }, { \"code\": \"SN\", \"name\": \"Senegal\" }, { \"code\": \"RS\", \"name\": \"Serbia\" }, { \"code\": \"SC\", \"name\": \"Seychelles\" }, { \"code\": \"SL\", \"name\": \"Sierra Leone\" }, { \"code\": \"SG\", \"name\": \"Singapore\" }, { \"code\": \"SX\", \"name\": \"Sint Maarten (Dutch part)\" }, { \"code\": \"SK\", \"name\": \"Slovakia\" }, { \"code\": \"SI\", \"name\": \"Slovenia\" }, { \"code\": \"SB\", \"name\": \"Solomon Islands\" }, { \"code\": \"SO\", \"name\": \"Somalia\" }, { \"code\": \"ZA\", \"name\": \"South Africa\" }, { \"code\": \"GS\", \"name\": \"South Georgia and the South Sandwich Islands\" }, { \"code\": \"SS\", \"name\": \"South Sudan\" }, { \"code\": \"ES\", \"name\": \"Spain\" }, { \"code\": \"LK\", \"name\": \"Sri Lanka\" }, { \"code\": \"SD\", \"name\": \"Sudan\" }, { \"code\": \"SR\", \"name\": \"Suriname\" }, { \"code\": \"SJ\", \"name\": \"Svalbard and Jan Mayen\" }, { \"code\": \"SZ\", \"name\": \"Swaziland\" }, { \"code\": \"SE\", \"name\": \"Sweden\" }, { \"code\": \"CH\", \"name\": \"Switzerland\" }, { \"code\": \"SY\", \"name\": \"Syrian Arab Republic\" }, { \"code\": \"TW\", \"name\": \"Taiwan, Province of China\" }, { \"code\": \"TJ\", \"name\": \"Tajikistan\" }, { \"code\": \"TZ\", \"name\": \"Tanzania, United Republic of\" }, { \"code\": \"TH\", \"name\": \"Thailand\" }, { \"code\": \"TL\", \"name\": \"Timor-Leste\" }, { \"code\": \"TG\", \"name\": \"Togo\" }, { \"code\": \"TK\", \"name\": \"Tokelau\" }, { \"code\": \"TO\", \"name\": \"Tonga\" }, { \"code\": \"TT\", \"name\": \"Trinidad and Tobago\" }, { \"code\": \"TN\", \"name\": \"Tunisia\" }, { \"code\": \"TR\", \"name\": \"Turkey\" }, { \"code\": \"TM\", \"name\": \"Turkmenistan\" }, { \"code\": \"TC\", \"name\": \"Turks and Caicos Islands\" }, { \"code\": \"TV\", \"name\": \"Tuvalu\" }, { \"code\": \"UG\", \"name\": \"Uganda\" }, { \"code\": \"UA\", \"name\": \"Ukraine\" }, { \"code\": \"AE\", \"name\": \"United Arab Emirates\" }, { \"code\": \"GB\", \"name\": \"United Kingdom\" }, { \"code\": \"US\", \"name\": \"United States\" }, { \"code\": \"UM\", \"name\": \"United States Minor Outlying Islands\" }, { \"code\": \"UY\", \"name\": \"Uruguay\" }, { \"code\": \"UZ\", \"name\": \"Uzbekistan\" }, { \"code\": \"VU\", \"name\": \"Vanuatu\" }, { \"code\": \"VE\", \"name\": \"Venezuela, Bolivarian Republic of\" }, { \"code\": \"VN\", \"name\": \"Viet Nam\" }, { \"code\": \"VG\", \"name\": \"Virgin Islands, British\" }, { \"code\": \"VI\", \"name\": \"Virgin Islands, U.S.\" }, { \"code\": \"WF\", \"name\": \"Wallis and Futuna\" }, { \"code\": \"EH\", \"name\": \"Western Sahara\" }, { \"code\": \"YE\", \"name\": \"Yemen\" }, { \"code\": \"ZM\", \"name\": \"Zambia\" }, { \"code\": \"ZW\", \"name\": \"Zimbabwe\" }];\n  }, {}] }, {}, [1]);"]}